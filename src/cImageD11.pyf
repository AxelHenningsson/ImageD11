

python module cImageD11
  
   usercode '''
#include "blobs.h"
   '''
   interface
   
    usercode '''
#define str(x) (#x)
   PyDict_SetItemString(d,str(s_1)    ,PyInt_FromLong(s_1));
   PyDict_SetItemString(d,str(s_I)    ,PyInt_FromLong(s_I));
   PyDict_SetItemString(d,str(s_I2)   ,PyInt_FromLong(s_I2));
   PyDict_SetItemString(d,str(s_fI)   ,PyInt_FromLong(s_fI));
   PyDict_SetItemString(d,str(s_ffI)  ,PyInt_FromLong(s_ffI));
   PyDict_SetItemString(d,str(s_sI)   ,PyInt_FromLong(s_sI));
   PyDict_SetItemString(d,str(s_ssI)  ,PyInt_FromLong(s_ssI));
   PyDict_SetItemString(d,str(s_sfI)  ,PyInt_FromLong(s_sfI));
   PyDict_SetItemString(d,str(s_oI)   ,PyInt_FromLong(s_oI));
   PyDict_SetItemString(d,str(s_ooI)  ,PyInt_FromLong(s_ooI));
   PyDict_SetItemString(d,str(s_soI)  ,PyInt_FromLong(s_soI));
   PyDict_SetItemString(d,str(s_foI)  ,PyInt_FromLong(s_foI));
   PyDict_SetItemString(d,str(mx_I)   ,PyInt_FromLong(mx_I));
   PyDict_SetItemString(d,str(mx_I_f) ,PyInt_FromLong(mx_I_f));
   PyDict_SetItemString(d,str(mx_I_s) ,PyInt_FromLong(mx_I_s));
   PyDict_SetItemString(d,str(mx_I_o) ,PyInt_FromLong(mx_I_o));
   PyDict_SetItemString(d,str(bb_mx_f),PyInt_FromLong(bb_mx_f));
   PyDict_SetItemString(d,str(bb_mx_s),PyInt_FromLong(bb_mx_s));
   PyDict_SetItemString(d,str(bb_mx_o),PyInt_FromLong(bb_mx_o));
   PyDict_SetItemString(d,str(bb_mn_f),PyInt_FromLong(bb_mn_f));
   PyDict_SetItemString(d,str(bb_mn_s),PyInt_FromLong(bb_mn_s));
   PyDict_SetItemString(d,str(bb_mn_o),PyInt_FromLong(bb_mn_o));

   PyDict_SetItemString(d,str(avg_i),PyInt_FromLong(avg_i));
   PyDict_SetItemString(d,str(f_raw),PyInt_FromLong(f_raw));
   PyDict_SetItemString(d,str(s_raw),PyInt_FromLong(s_raw));
   PyDict_SetItemString(d,str(f_cen),PyInt_FromLong(f_cen));
   PyDict_SetItemString(d,str(s_cen),PyInt_FromLong(s_cen));
   PyDict_SetItemString(d,str(o_raw),PyInt_FromLong(o_raw));
   PyDict_SetItemString(d,str(m_ff),PyInt_FromLong(m_ff));
   PyDict_SetItemString(d,str(m_ss),PyInt_FromLong(m_ss));
   PyDict_SetItemString(d,str(m_oo),PyInt_FromLong(m_oo));
   PyDict_SetItemString(d,str(m_sf),PyInt_FromLong(m_sf));
   PyDict_SetItemString(d,str(m_so),PyInt_FromLong(m_so));
   PyDict_SetItemString(d,str(m_fo),PyInt_FromLong(m_fo));
   PyDict_SetItemString(d,str(dety),PyInt_FromLong(dety));
   PyDict_SetItemString(d,str(detz),PyInt_FromLong(detz));
   
   PyDict_SetItemString(d,str(NPROPERTY),PyInt_FromLong(NPROPERTY));
'''

   end interface

  

   interface
      function connectedpixels( data, labels, threshold, &
                                verbose, con8, ns, nf)
         intent(c) connectedpixels
         intent(c)
         real, intent(in) :: data(ns,nf)
         integer, intent(inout) :: labels(ns,nf)
         integer, intent(hide), depend(data) :: ns=shape(data,0)
         integer, intent(hide), depend(data) :: nf=shape(data,1)
         integer, optional :: con8 = 1
         integer, optional ::  verbose = 0
         real threshold
! Returns 
         integer :: connectedpixels
! we say threadsafe but it writes in labels, so we assume no one else
! is using at the same time
         threadsafe
      end function connectedpixels
   end interface

   interface
      subroutine blobproperties( data, labels, np, omega, &
                                 verbose, ns, nf, results)
         intent(c) blobproperties
         intent(c)
         real, intent(in) :: data(ns, nf)
         integer, intent(in) :: labels(ns, nf)
         integer, intent(hide), depend(data) :: ns=shape(data,0)
         integer, intent(hide), depend(data) :: nf=shape(data,1) 
         integer, intent(in) :: np
         double precision, intent(out) :: results( np, NPROPERTY )
         real, intent(in), optional :: omega = 0
         integer, optional :: verbose = 0
         threadsafe 
      end subroutine blobproperties
   endinterface

   interface
      subroutine blob_moments( results, np )
         intent(c) blob_moments
         intent(c)
         double precision, intent( inout ) :: results( np, NPROPERTY )
         integer, intent(hide), depend(results) :: np=shape(results,0)
         threadsafe
      end subroutine blob_moments
   end interface

   interface
      function bloboverlaps( labels1, npk1, results1,    & 
                               labels2, npk2, results2,    &
                               verbose, ns, nf)
          intent(c) bloboverlaps
          intent(c)
          integer :: bloboverlaps
          integer, intent( inout ) :: labels1( ns, nf )
          integer, intent( inout ) :: labels2( ns, nf )
          integer, intent(hide), depend(labels1) :: ns=shape(labels1,0)
          integer, intent(hide), depend(labels1) :: nf=shape(labels1,1) 
          integer, intent(in) :: npk1, npk2
          double precision, intent( inout ) :: results1( :, NPROPERTY )
          double precision, intent( inout ) :: results2( :, NPROPERTY )
          integer, intent(in) :: verbose = 0
          
      end subroutine bloboverlaps


   end interface

   interface 
      subroutine closest( x, v, ibest, best, nx, nv  )
          intent(c) closest
          double precision, intent(in) :: x(nx)
          double precision, intent(in) :: v(nv)
! Note : these are intent(fortran) to pass as pointers
          integer, intent( out ) :: ibest
          double precision, intent( out ) :: best
! Note : these are intent(c) to pass by reference
          integer, intent(c, hide), depend(x) :: nx=shape(x,0)
          integer, intent(c, hide), depend(v) :: nv=shape(v,0)
      end subroutine closest
   end interface
   
   interface 
       function score( ubi, gv, tol, ng )
          intent(c) score
          intent(c)
          integer :: score
          integer, intent(hide), depend(gv) :: ng
          double precision, intent(in) :: ubi(3,3)
          double precision, intent(in) :: gv(ng, 3)
          double precision, intent(in) :: tol

       end function score
   end interface

   interface 
       subroutine score_and_refine( ubi, gv, tol, n, sumdrlv2, ng)
          intent(c) score_and_refine
! Note: fortran, pass by ref
          integer, intent( out ) :: n
          double precision, intent(out) :: sumdrlv2
          double precision, intent(c, inout) :: ubi(3,3)
          double precision, intent(c, in) :: gv(ng,3)
          integer, intent(c, hide), depend( gv ) :: ng 
          double precision, intent(c, in) :: tol
       end subroutine score_and_refine

   end interface

   interface
       function score_and_assign( ubi, gv, tol, drlv2, labels,label, ng )
          intent(c) score_and_assign
          intent(c)
          integer score_and_assign
          double precision, intent(in) :: ubi(3,3)
          double precision, intent(in) :: gv(ng,3)
          integer, intent(hide), depend( gv ) :: ng 
          double precision, intent(in) :: tol
          double precision, intent(inout) :: drlv2(ng)
          integer*4, intent(inout) :: labels(ng)
          integer, intent(in) :: label
       end function score_and_assign
   end interface 


   interface
       subroutine refine_assigned( ubi, gv, labels, label, npk, drlv2, ng )
          intent(c) refine_assigned
          double precision, intent(c,in) :: ubi(3,3)
          double precision, intent(c,in) :: gv(ng,3)
          integer, intent(c,in) :: labels(ng)
          integer, intent(c,in) :: label
! Note : pass by ref
          integer, intent(out) :: npk
          double precision, intent(out) :: drlv2
          integer, intent(c,hide), depend( gv ) :: ng
       end subroutine refine_assigned
   end interface 


   interface 
      subroutine put_incr( data, ind, vals,  boundscheck, n, m)
          intent(c) put_incr
          intent(c)
          real, intent(inout) :: data(m)
          real, intent(in) :: vals(n)
! Assumes 64 bit addressing, usually true
          integer*8, dimension(n), intent(in) :: ind
          integer, intent(hide), depend( data ) :: m
          integer, intent(hide), depend( ind) :: n
          integer, optional :: boundscheck = 0
      end subroutine put_incr
   end interface


   interface
      subroutine assign( ubi, gv, tol, drlv2, labels, ig, ng)
         intent(c) assign
	 intent(c)
	 double precision, intent(c,in) :: ubi(3,3)
	 double precision, intent(c,in) :: gv(ng,3)
	 double precision, intent(c,in) :: tol
	 double precision, intent(c,inout) :: drlv2(ng)
	 integer*4, intent(inout) :: labels(ng)
	 integer, intent(c,in) :: ig
	 integer, intent(c,hide), depend( gv ) :: ng
      end subroutine assign
   end interface


   interface
      subroutine compute_gv(xlylzl,omega,omegasign,wvln,wedge,chi,t,gv,ng)
          intent(c) compute_gv
	  intent(c)
	  integer, intent(c,hide), depend( xlylzl ) :: ng
	  double precision, intent(in):: xlylzl(ng,3)
	  double precision, intent(in):: omega(ng)
	  double precision, intent(in):: omegasign, wvln, wedge, chi
	  double precision, intent(in):: t(3)
	  double precision, intent(inout):: gv(ng,3)
      end subroutine compute_gv
   end interface



   interface
      subroutine compute_xlylzl(s,f,p,r,dist,xlylzl,n)
	 intent(c) compute_xlylzl
	 intent(c)
	 double precision, intent(in):: s(n), f(n)
	 double precision, intent(inout):: xlylzl(n,3)
	 double precision, intent(in):: p(4), r(9), dist(3)
	 integer, intent(c,hide), depend( s ) :: n
      end subroutine compute_xlylzl
   end interface



end python module cImageD11
