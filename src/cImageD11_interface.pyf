



usercode '''

#include "blobs.h"
#include "check_cpu_auto.c"

'''
interface

usercode '''

/* This runs inside the init part of the module as it is after interface */

#define str(x) (#x)
PyDict_SetItemString(d,str(s_1)    ,PyInt_FromLong(s_1));
PyDict_SetItemString(d,str(s_I)    ,PyInt_FromLong(s_I));
PyDict_SetItemString(d,str(s_I2)   ,PyInt_FromLong(s_I2));
PyDict_SetItemString(d,str(s_fI)   ,PyInt_FromLong(s_fI));
PyDict_SetItemString(d,str(s_ffI)  ,PyInt_FromLong(s_ffI));
PyDict_SetItemString(d,str(s_sI)   ,PyInt_FromLong(s_sI));
PyDict_SetItemString(d,str(s_ssI)  ,PyInt_FromLong(s_ssI));
PyDict_SetItemString(d,str(s_sfI)  ,PyInt_FromLong(s_sfI));
PyDict_SetItemString(d,str(s_oI)   ,PyInt_FromLong(s_oI));
PyDict_SetItemString(d,str(s_ooI)  ,PyInt_FromLong(s_ooI));
PyDict_SetItemString(d,str(s_soI)  ,PyInt_FromLong(s_soI));
PyDict_SetItemString(d,str(s_foI)  ,PyInt_FromLong(s_foI));
PyDict_SetItemString(d,str(mx_I)   ,PyInt_FromLong(mx_I));
PyDict_SetItemString(d,str(mx_I_f) ,PyInt_FromLong(mx_I_f));
PyDict_SetItemString(d,str(mx_I_s) ,PyInt_FromLong(mx_I_s));
PyDict_SetItemString(d,str(mx_I_o) ,PyInt_FromLong(mx_I_o));
PyDict_SetItemString(d,str(bb_mx_f),PyInt_FromLong(bb_mx_f));
PyDict_SetItemString(d,str(bb_mx_s),PyInt_FromLong(bb_mx_s));
PyDict_SetItemString(d,str(bb_mx_o),PyInt_FromLong(bb_mx_o));
PyDict_SetItemString(d,str(bb_mn_f),PyInt_FromLong(bb_mn_f));
PyDict_SetItemString(d,str(bb_mn_s),PyInt_FromLong(bb_mn_s));
PyDict_SetItemString(d,str(bb_mn_o),PyInt_FromLong(bb_mn_o));

PyDict_SetItemString(d,str(avg_i),PyInt_FromLong(avg_i));
PyDict_SetItemString(d,str(f_raw),PyInt_FromLong(f_raw));
PyDict_SetItemString(d,str(s_raw),PyInt_FromLong(s_raw));
PyDict_SetItemString(d,str(f_cen),PyInt_FromLong(f_cen));
PyDict_SetItemString(d,str(s_cen),PyInt_FromLong(s_cen));
PyDict_SetItemString(d,str(o_raw),PyInt_FromLong(o_raw));
PyDict_SetItemString(d,str(m_ff),PyInt_FromLong(m_ff));
PyDict_SetItemString(d,str(m_ss),PyInt_FromLong(m_ss));
PyDict_SetItemString(d,str(m_oo),PyInt_FromLong(m_oo));
PyDict_SetItemString(d,str(m_sf),PyInt_FromLong(m_sf));
PyDict_SetItemString(d,str(m_so),PyInt_FromLong(m_so));
PyDict_SetItemString(d,str(m_fo),PyInt_FromLong(m_fo));
PyDict_SetItemString(d,str(dety),PyInt_FromLong(dety));
PyDict_SetItemString(d,str(detz),PyInt_FromLong(detz));

PyDict_SetItemString(d,str(NPROPERTY),PyInt_FromLong(NPROPERTY));

PyDict_SetItemString(d,str(got_AVX2),PyInt_FromLong(i_have_AVX2()));
PyDict_SetItemString(d,str(got_SSE2),PyInt_FromLong(i_have_SSE2()));

'''
end interface

interface
    function connectedpixels( data, labels, threshold, &
                              verbose, con8, ns, nf)
        intent(c) connectedpixels
        intent(c)
        real, intent(in) :: data(ns,nf)
        integer, intent(inout) :: labels(ns,nf)
        integer, intent(hide), depend(data) :: ns=shape(data,0)
        integer, intent(hide), depend(data) :: nf=shape(data,1)
        integer, optional :: con8 = 1
        integer, optional ::  verbose = 0
        real threshold
        ! Returns
        integer :: connectedpixels
        ! we say threadsafe but it writes in labels, so we assume no one else
        ! is using at the same time
        threadsafe
    end function connectedpixels

    function localmaxlabel( data, labels, wrk, ns, nf, cpu )
        intent(c) localmaxlabel
        intent(c)
        real, intent(in) :: data(ns,nf)
        integer*4, intent(inout), note(hello) :: labels(ns,nf)
        integer*1, intent(inout) :: wrk(ns,nf)
        integer, intent(hide), depend(data) :: ns=shape(data,0)
        integer, intent(hide), depend(data) :: nf=shape(data,1)
        integer, optional ::  cpu = 0
        ! Returns
        integer :: localmaxlabel
        ! we say threadsafe but it writes in labels, so we assume no one else
        ! is using at the same time
        threadsafe
    end function localmaxlabel

    subroutine blobproperties( data, labels, np, omega, &
                               verbose, ns, nf, results)
        intent(c) blobproperties
        intent(c)
        real, intent(in) :: data(ns, nf)
        integer, intent(in) :: labels(ns, nf)
        integer, intent(hide), depend(data) :: ns=shape(data,0)
        integer, intent(hide), depend(data) :: nf=shape(data,1)
        integer, intent(in) :: np
        double precision, intent(out) :: results( np, NPROPERTY )
        real, intent(in), optional :: omega = 0
        integer, optional :: verbose = 0
        threadsafe
    end subroutine blobproperties

    subroutine blob_moments( results, np )
        intent(c) blob_moments
        intent(c)
        double precision, intent( inout ) :: results( np, NPROPERTY )
        integer, intent(hide), depend(results) :: np=shape(results,0)
        threadsafe
    end subroutine blob_moments

    function bloboverlaps( labels1, npk1, results1,    &
                           labels2, npk2, results2,    &
                           verbose, ns, nf)
        intent(c) bloboverlaps
        intent(c)
        integer :: bloboverlaps
        integer, intent( inout ) :: labels1( ns, nf )
        integer, intent( inout ) :: labels2( ns, nf )
        integer, intent(hide), depend(labels1) :: ns=shape(labels1,0)
        integer, intent(hide), depend(labels1) :: nf=shape(labels1,1)
        integer, intent(in) :: npk1, npk2
        double precision, intent( inout ) :: results1( :, NPROPERTY )
        double precision, intent( inout ) :: results2( :, NPROPERTY )
        integer, intent(in) :: verbose = 0
    end subroutine bloboverlaps

    subroutine closest_vec( x, dim, nv, ic )
        intent(c) closest_vec
        intent(c)
        double precision, intent(in) :: x(nv, dim)
        integer, intent(hide), depend(x) :: dim=shape(x,1)
        integer, intent(hide), depend(x) :: nv=shape(x,0)
        integer, intent(inout) :: ic( nv )
    end subroutine closest_vec

    subroutine closest( x, v, ibest, best, nx, nv  )
        intent(c) closest
        double precision, intent(in) :: x(nx)
        double precision, intent(in) :: v(nv)
        ! Note : these are intent(fortran) to pass as pointers
        integer, intent( out ) :: ibest
        double precision, intent( out ) :: best
        ! Note : these are intent(c) to pass by reference
        integer, intent(c, hide), depend(x) :: nx=shape(x,0)
        integer, intent(c, hide), depend(v) :: nv=shape(v,0)
    end subroutine closest

    function score( ubi, gv, tol, ng )
        intent(c) score
        intent(c)
        integer :: score
        integer, intent(hide), depend(gv) :: ng
        double precision, intent(in) :: ubi(3,3)
        double precision, intent(in) :: gv(ng, 3)
        double precision, intent(in) :: tol
    end function score

    subroutine score_and_refine( ubi, gv, tol, n, sumdrlv2, ng)
        intent(c) score_and_refine
        ! Note: fortran, pass by ref
        integer, intent( out ) :: n
        double precision, intent(out) :: sumdrlv2
        double precision, intent(c, inout) :: ubi(3,3)
        double precision, intent(c, in) :: gv(ng,3)
        integer, intent(c, hide), depend( gv ) :: ng
        double precision, intent(c, in) :: tol
    end subroutine score_and_refine

    function score_and_assign( ubi, gv, tol, drlv2, labels,label, ng )
        intent(c) score_and_assign
        intent(c)
        integer score_and_assign
        double precision, intent(in) :: ubi(3,3)
        double precision, intent(in) :: gv(ng,3)
        integer, intent(hide), depend( gv ) :: ng
        double precision, intent(in) :: tol
        double precision, intent(inout) :: drlv2(ng)
        integer*4, intent(inout) :: labels(ng)
        integer, intent(in) :: label
    end function score_and_assign

    subroutine refine_assigned( ubi, gv, labels, label, npk, drlv2, ng )
        intent(c) refine_assigned
        double precision, intent(c,in) :: ubi(3,3)
        double precision, intent(c,in) :: gv(ng,3)
        integer, intent(c,in) :: labels(ng)
        integer, intent(c,in) :: label
        ! Note : pass by ref
        integer, intent(out) :: npk
        double precision, intent(out) :: drlv2
        integer, intent(c,hide), depend( gv ) :: ng
    end subroutine refine_assigned

    subroutine put_incr64( data, ind, vals,  boundscheck, n, m)
        intent(c) put_incr64
        intent(c)
        real, intent(inout) :: data(m)
        real, intent(in) :: vals(n)
        integer(kind=8), dimension(n), intent(in) :: ind
        integer, intent(hide), depend( data ) :: m
        integer, intent(hide), depend( ind) :: n
        integer, optional :: boundscheck = 0
    end subroutine put_incr

    subroutine put_incr32( data, ind, vals,  boundscheck, n, m)
        intent(c) put_incr32
        intent(c)
        real, intent(inout) :: data(m)
        real, intent(in) :: vals(n)
        integer(kind=4), dimension(n), intent(in) :: ind
        integer, intent(hide), depend( data ) :: m
        integer, intent(hide), depend( ind) :: n
        integer, optional :: boundscheck = 0
    end subroutine put_incr


    subroutine assign( ubi, gv, tol, drlv2, labels, ig, ng)
        intent(c) assign
        intent(c)
        double precision, intent(c,in) :: ubi(3,3)
        double precision, intent(c,in) :: gv(ng,3)
        double precision, intent(c,in) :: tol
        double precision, intent(c,inout) :: drlv2(ng)
        integer*4, intent(inout) :: labels(ng)
        integer, intent(c,in) :: ig
        integer, intent(c,hide), depend( gv ) :: ng
    end subroutine assign

    subroutine compute_gv(xlylzl,omega,omegasign,wvln,wedge,chi,t,gv,ng)
        intent(c) compute_gv
        intent(c)
        integer, intent(c,hide), depend( xlylzl ) :: ng
        double precision, intent(in):: xlylzl(ng,3)
        double precision, intent(in):: omega(ng)
        double precision, intent(in):: omegasign, wvln, wedge, chi
        double precision, intent(in):: t(3)
        double precision, intent(inout):: gv(ng,3)
    end subroutine compute_gv

    subroutine compute_xlylzl(s,f,p,r,dist,xlylzl,n)
        intent(c) compute_xlylzl
        intent(c)
        double precision, intent(in):: s(n), f(n)
        double precision, intent(inout):: xlylzl(n,3)
        double precision, intent(in):: p(4), r(9), dist(3)
        integer, intent(c,hide), depend( s ) :: n
    end subroutine compute_xlylzl

    subroutine cluster1d( ar, n, order, tol, nclusters, ids, avgs)
        intent(c) cluster1d
        double precision, intent(c, in) :: ar(n)
        integer, intent(c, hide), depend( ar ) :: n
        integer, intent(c, in) :: order(n)
        double precision, intent(c, in) :: tol
        integer, intent(out) :: nclusters
        integer, intent(c,inout) :: ids(n)
        double precision, intent(c, inout) :: avgs(n)
    end subroutine cluster1d

    subroutine score_gvec_z( ubi, ub, gv, g0, g1, g2, e, rec, n )
        intent(c) score_gvec_z
        intent(c)
        double precision, intent(in)    :: ubi(3,3)
        double precision, intent(in)    :: ub(3,3)
        integer, intent(c, hide), depend( gv ) :: n
        double precision, intent(in)    :: gv(n,3)
        double precision, intent(inout) :: g0(n,3)
        double precision, intent(inout) :: g1(n,3)
        double precision, intent(inout) :: g2(n,3)
        double precision, intent(inout) ::  e(n,3)
        integer, intent(in) :: rec
    end subroutine score_gvec_z

    function misori_cubic( u1, u2)
        intent(c) misori_cubic
        intent(c)
        double precision, intent(in) :: u1(3,3), u2(3,3)
        ! Returns
        double precision :: misori_cubic
        threadsafe
    end function misori_cubic

    function misori_monoclinic( u1, u2)
        intent(c) misori_monoclinic
        intent(c)
        double precision, intent(in) :: u1(3,3), u2(3,3)
        ! Returns
        double precision :: misori_monoclinic
        threadsafe
    end function misori_monoclinic

    function misori_orthorhombic( u1, u2)
        intent(c) misori_orthorhombic
        intent(c)
        double precision, intent(in) :: u1(3,3), u2(3,3)
        ! Returns
        double precision :: misori_orthorhombic
        threadsafe
    end function misori_orthorhombic

    function misori_tetragonal( u1, u2)
        intent(c) misori_tetragonal
        intent(c)
        double precision, intent(in) :: u1(3,3), u2(3,3)
        ! Returns
        double precision :: misori_tetragonal
        threadsafe
    end function misori_tetragonal

    subroutine misori_cubic_pairs( u, dist, n)
        intent(c) misori_cubic_pairs
        intent(c)
        double precision, intent(in) :: u(n,3,3)
        integer, intent( hidden ), depend(u) :: n
        double precision, intent(inout) :: dist( (n*(n-1)/2) )
    end subroutine misori_cubic_pairs

    function count_shared( pi, ni, pj, nj )
        intent(c) count_shared
        intent(c)
        integer, intent(in) :: pi(ni)
        integer, intent( hidden ), depend(pi) :: ni
        integer, intent(in) :: pj(nj)
        integer, intent( hidden ), depend(pj) :: nj
        ! return value is int too
        integer :: count_shared
        threadsafe
    end function count_shared

    subroutine clean_mask( msk, ret, ns, nf )
        intent(c) clean_mask
        intent(c)
        integer*1, intent(in)  :: msk( ns, nf )
        integer, intent(hide), depend(msk) :: ns=shape(msk,0)
        integer, intent(hide), depend(msk) :: nf=shape(msk,1)
        integer*1, intent(inout), dimension(ns, nf) :: ret
        threadsafe
    end function clean_mask

    subroutine array_stats( img, npx, minval, maxval, mean, var )
        intent(c) array_stats
        real, intent(c, in), dimension(npx) :: img
        integer, intent(c, hide), depend(img) :: npx = shape(img,0)
        ! these are intent(fortran) pointers
        real, intent(out) :: minval, maxval, mean, var
        threadsafe
    end subroutine array_stats

    subroutine array_histogram( img, npx, low, high, hist, nhist )
        intent(c) array_histogram
        intent(c)
        real, intent(in), dimension(npx) :: img
        integer, intent(hide), depend(img) :: npx = shape(img,0)
        real, intent(in) :: low, high
        integer*4, intent(inout), dimension(nhist) :: hist
        integer, intent(hide), depend(hist) :: nhist = shape(hist, 0 )
        threadsafe
    end subroutine array_histogram

    function sparse_is_sorted( i, j, nnz )
        intent(c) sparse_is_sorted
        intent(c)
        integer(kind=-2), intent(in), dimension(nnz) :: i
        integer(kind=-2), intent(in), dimension(nnz) :: j
        integer, intent(hide), depend(i) :: nnz = shape( i, 0)
        threadsafe
        ! returns
        integer sparse_is_sorted
    end function spare_is_sorted

    function sparse_connectedpixels( v, i, j, nnz, threshold, labels )
        intent(c) sparse_connectedpixels
        intent(c)
        real, intent(in), dimension(nnz) :: v
        integer(kind=-2), intent(in), dimension(nnz) :: i
        integer(kind=-2), intent(in), dimension(nnz) :: j
        integer, intent(hide), depend(i) :: nnz = shape( i, 0)
        real threshold
        integer, intent(inout), dimension(nnz) :: labels
        ! Returns
        integer :: sparse_connectedpixels
        threadsafe
    end function sparse_connectedpixels

    function sparse_connectedpixels_splat( v, i, j, nnz, threshold, labels, Z, ni, nj )
        intent(c) sparse_connectedpixels_splat
        intent(c)
        real, intent(in), dimension(nnz) :: v
        integer(kind=-2), intent(in), dimension(nnz) :: i
        integer(kind=-2), intent(in), dimension(nnz) :: j
        integer, intent(hide), depend(i) :: nnz = shape( i, 0)
        real threshold
        integer, intent(inout), dimension(nnz) :: labels
        integer, intent(inout), dimension((ni+2)*(nj+2)) :: Z
        integer :: ni, nj
        ! Returns
        integer :: sparse_connectedpixels_splat
        threadsafe
    end function sparse_connectedpixels_splat

end interface


